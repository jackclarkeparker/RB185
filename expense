#! /usr/bin/env ruby

require 'pg'

CONNECTION = PG.connect(dbname: 'expenses')

def display_help
  puts <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
  HELP
end

def list_expenses
  result = CONNECTION.exec('TABLE expenses ORDER BY created_on;')

  result.each do |tuple|
    columns = [ tuple['id'].rjust(2),
                tuple['created_on'],
                tuple['amount'].rjust(12),
                tuple['memo'] ]

    puts columns.join(' | ')
  end
end

def add_expense_conditional
  case ARGV.size
  when (4..) then add_expense(ARGV[1], ARGV[2], ARGV[3])
  when 3     then add_expense(ARGV[1], ARGV[2])
  else            puts "You must provide an amount and memo."
  end
end

def add_expense(amount, memo, created_on = Date.today)
  memo = escaped_single_quotes(memo)
  insert = "INSERT INTO expenses (amount, memo, created_on) "\
           "VALUES (#{amount}, '#{memo}', '#{created_on}')"
  CONNECTION.exec(insert)
end

def escaped_single_quotes(message)
  message.gsub(/[^']'[^']/) do |match|
    match[0] + "''" + match[2]
  end
end

# I used NOW() to find the current time, because I've been working with SQL
# functions lately. 

# However, there's no need to rely on SQL functions when we can use Ruby functions instead.
# By using Date.today, we get around the awkwardness of whether to place
# quotes for `created_on` (which varies depending on whether you're using
# the `NOW()` function, or an argument that's been supplied)

# The question of where and how to supply single quotes has also been simplified by this.
# It's better to place them directly in the `insert` string, rather than arranging for the
# interpolation of the arguments to bring the single quotes with them - This spreads
# concerns addressing the string in more than one place unnecessarily.

command = ARGV.first
case command
when 'list'
  list_expenses
when 'add'
  add_expense_conditional
else
  display_help
end

