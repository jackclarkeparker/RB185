#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when 'add'
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses
    when 'search'
      @application.search_expenses(arguments[0])
    when 'delete'
      @application.delete_expense(arguments[0])
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = IO.console.getch.downcase
      @application.delete_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  def initialize
    @connection = PG::Connection.new(dbname: "expenses")
    setup_schema
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def list_expenses
    result_set = @connection.exec('TABLE expenses ORDER BY created_on;')
    display_expenses(result_set)
  end

  def search_expenses(search_query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result_set = @connection.exec_params(sql, ["%#{search_query}%"])
    display_expenses(result_set)
  end

  def delete_expense(index)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [index])
    
    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [index])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{index}'"
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables"\
          " WHERE table_schema = 'public' AND table_name = 'expenses'"
    if @connection.exec(sql).values.first.first == '0'
      sql = File.read("schema.sql")
      @connection.exec(sql)
    end
  end

  def display_expenses(result_set)
    display_count(result_set)

    result_set.each do |record|
      columns = [ record['id'].rjust(3),
                  record['created_on'],
                  record['amount'].rjust(12),
                  record['memo'] ]

      puts columns.join(' | ')
    end
    puts ("-" * 50)

    display_amount_total(result_set)
  end

  def display_count(result_set)
    expense_count = result_set.ntuples

    if expense_count > 0
      puts "There are #{expense_count} expense#{"s" if expense_count > 1}."
    else
      abort "There are no expenses."
    end
  end

  def display_amount_total(result_set)
    amounts = result_set.field_values('amount')
    sum_amounts = amounts.map(&:to_f).sum
    formatted_sum = format("%.2f", sum_amounts)
    puts "Total" + formatted_sum.rjust(26)
  end
end

cli = CLI.new
cli.run(ARGV)

