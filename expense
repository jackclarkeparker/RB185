#! /usr/bin/env ruby

require 'pg'

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when 'add'
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses
    when 'search'
      @application.search_expenses(ARGV.last)
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  def initialize
    @connection = PG::Connection.new(dbname: "expenses")
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def list_expenses
    result_set = @connection.exec('TABLE expenses ORDER BY created_on;')
    display_expenses(result_set)
  end

  def search_expenses(search_query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result_set = @connection.exec_params(sql, ["%#{search_query}%"])
    display_expenses(result_set)
  end

  def display_expenses(result_set)
    result_set.each do |record|
      columns = [ record['id'].rjust(2),
                  record['created_on'],
                  record['amount'].rjust(12),
                  record['memo'] ]

      puts columns.join(' | ')
    end
  end
end

cli = CLI.new
cli.run(ARGV)


